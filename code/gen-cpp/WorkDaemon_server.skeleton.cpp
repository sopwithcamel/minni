// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "WorkDaemon.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace workdaemon;

class WorkDaemonHandler : virtual public WorkDaemonIf {
 public:
  WorkDaemonHandler() {
    // Your initialization goes here
  }

  void bark(const std::string& s) {
    // Your implementation goes here
    printf("bark\n");
  }

  void pulse(std::map<JobID, Status> & _return) {
    // Your implementation goes here
    printf("pulse\n");
  }

  void startMapper(const JobID jid, const ChunkID cid) {
    // Your implementation goes here
    printf("startMapper\n");
  }

  void startReducer(const JobID jid, const PartitionID kid, const std::string& outFile) {
    // Your implementation goes here
    printf("startReducer\n");
  }

  void sendData(std::vector<std::vector<std::string> > & _return, const PartitionID kid, const SeriesID sid) {
    // Your implementation goes here
    printf("sendData\n");
  }

  Status dataStatus(const PartitionID kid) {
    // Your implementation goes here
    printf("dataStatus\n");
  }

  void kill(const JobID jid) {
    // Your implementation goes here
    printf("kill\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<WorkDaemonHandler> handler(new WorkDaemonHandler());
  shared_ptr<TProcessor> processor(new WorkDaemonProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

